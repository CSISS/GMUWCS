/*
 * HDF4Image_Dataset.cpp
 *
 *  Created on: Dec 19, 2008
 *      Author: pli
 */

#include "HDF4Image_Dataset.h"

using namespace std;
HDF4Image_Dataset::HDF4Image_Dataset()
{

}

HDF4Image_Dataset::HDF4Image_Dataset(const string& id, vector<int> &rBandList):
	AbstractDataset(id,rBandList){
	mdMissingValue=-9999;
	mbGeoTransformSet=FALSE;
}

HDF4Image_Dataset::~HDF4Image_Dataset()
{

}

CPLErr HDF4Image_Dataset::initialDataset(const int isSimple)
{
	mbIsVirtualDS=FALSE;

	if(ms_CoverageID.empty()||ms_CoverageID==""||
		(!ms_CoverageID.empty()&&!EQUALN(ms_CoverageID.c_str(),"HDF4IMAGE:",10)))
	{
		SetWCS_ErrorLocator("HDF4Image_Dataset::initialDataset()");
		WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Incorrect coverage ID.");

    	return CE_Failure;
	}

	vector<string> strSet;
	unsigned int n=csvburstCpp(ms_CoverageID, strSet,':');
	if( n == 3  )
	{
    	msDataTypeName=strSet[0] ;
    	mSrcFilename = strSet[1] ;
    	msDatasetName = strSet[2] ;

    }
	else if(n == 2)
	{
    	msDataTypeName=strSet[0] ;
    	mSrcFilename = strSet[1] ;
    	msDatasetName = "Band";
	}
	else
	{
		SetWCS_ErrorLocator("HDF4Image_Dataset::initialDataset()");
		WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Incorrect coverage ID.");

    	return CE_Failure;
	}

	mSrcFilename = myStrTrimsIn(mSrcFilename," \'\"");

	GDALDataset* pSrc = (GDALDataset*)GDALOpen( mSrcFilename.c_str(), GA_ReadOnly );
	if( pSrc == NULL )
	{
		SetWCS_ErrorLocator("HDF4Image_Dataset::initialDataset()");
		WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Failed to open file \"%s\".",mSrcFilename.c_str());

    	return CE_Failure;
	}

	msNativeFormat=GDALGetDriverShortName(pSrc->GetDriver());

	if(!EQUAL(msNativeFormat.c_str(),"HDF4IMAGE"))
	{
		GDALClose(pSrc);
		SetWCS_ErrorLocator("HDF4Image_Dataset::initialDataset()");
		WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Failed to open data format.");

    	return CE_Failure;
	}
	setMetaDataList(pSrc);

	//set noValue
	unsigned int nBandCount = pSrc->GetRasterCount();
	if(nBandCount<1)
	{
		GDALClose(pSrc);
		SetWCS_ErrorLocator("HDF4Image_Dataset::initialDataset()");
		WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Failed to get raster band.");

    	return CE_Failure;
	}
	int iSuc = 0;
	double noValue = pSrc->GetRasterBand(1)->GetNoDataValue(&iSuc);
	if(iSuc) mdMissingValue = noValue;

	maptrDS.reset(pSrc);

	//set moNativeCRS and mGeoTransform
	if(CE_None!=setNativeCRS()||
		CE_None!=setGeoTransform()||
		CE_None!=setGDALDataset(isSimple))
	{
		GDALClose(maptrDS.release());
    	return CE_Failure;
	}

	return CE_None;
}
CPLErr HDF4Image_Dataset::setNativeCRS()
{
	if(CE_None==AbstractDataset::setNativeCRS())
		return CE_None;
	else
		moNativeCRS.SetLocalCS("OGC:ImageCRS");
	return CE_None;
}
CPLErr HDF4Image_Dataset::setGDALDataset(const int isSimple)
{

	if(!mpBandList.empty())
	{
		int iRasterXSize=maptrDS->GetRasterXSize();
		int iRasterYSize=maptrDS->GetRasterYSize();

		//Yuanzheng Shao
		//VRTDataset *poVDS = new VRTDataset( iRasterXSize, iRasterYSize);
		VRTDataset *poVDS = (VRTDataset *)VRTCreate(iRasterXSize, iRasterYSize); 
		if(poVDS==NULL)
		{
			SetWCS_ErrorLocator("HDF4Image_Dataset::setGDALDataset()");
			WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Failed to create VRT dataSet.");

	    	return CE_Failure;
		}

		VRTSourcedRasterBand   *poVRTBand = NULL;
		GDALRasterBand  *poSrcBand = NULL;
		GDALDataType    eBandType;
		for( unsigned int i = 0; i < mpBandList.size(); i++ )
	    {
			poSrcBand = maptrDS->GetRasterBand(mpBandList[i]);
			if(poSrcBand==NULL)
			{
				GDALClose((GDALDatasetH) poVDS);
				SetWCS_ErrorLocator("HDF4Image_Dataset::setGDALDataset()");
				WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Failed to get raster band.");

		    	return CE_Failure;
			}
			eBandType = poSrcBand->GetRasterDataType();
		/* -------------------------------------------------------------------- */
		/*      Create this band.                                               */
		/* -------------------------------------------------------------------- */
		    poVDS->AddBand( eBandType, NULL );
		    poVRTBand = (VRTSourcedRasterBand *) poVDS->GetRasterBand( i+1 );

			poVRTBand->SetNoDataValue( mdMissingValue );

		    if(CE_None!=poVRTBand->AddSimpleSource( poSrcBand,0, 0,
		    		iRasterXSize, iRasterYSize, 0, 0,
		    		iRasterXSize, iRasterYSize, NULL,mdMissingValue ))
			{
				GDALClose((GDALDatasetH) poVDS);
				SetWCS_ErrorLocator("HDF4Image_Dataset::setGDALDataset()");
				WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Failed to Add Simple Source into VRT DataSet.");

		    	return CE_Failure;
			}
		}
		if(mbGeoTransformSet)
		{
			poVDS->SetGeoTransform(mdGeotransform);
			char *psTargetSRS;
			moNativeCRS.exportToWkt(&psTargetSRS);
			poVDS->SetProjection(psTargetSRS);
			OGRFree( psTargetSRS );
		}

		GDALClose(maptrDS.release());
		maptrDS.reset(poVDS);

	}
	return CE_None;
}
CPLErr HDF4Image_Dataset::setMetaDataList(GDALDataset* hSrc)
{
	char** papszMetadata = hSrc->GetMetadata("");

	mvtrMeteDataList.push_back(
			"Product_Description=The image data be created by WCS 1.1.0 from HDF4Image data.");
	for (int i = 0; i < CSLCount((char**) papszMetadata); ++i)
	{
		mvtrMeteDataList.push_back(papszMetadata[i]);
	}

	return CE_None;
}
