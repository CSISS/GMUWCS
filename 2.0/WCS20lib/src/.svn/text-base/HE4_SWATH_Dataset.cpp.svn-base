#include "HE4_SWATH_Dataset.h"

using namespace std;
HE4_SWATH_Dataset::HE4_SWATH_Dataset()
{
}

HE4_SWATH_Dataset::HE4_SWATH_Dataset(const string& id, vector<int> &rBandList) :
	AbstractDataset(id, rBandList)
{
	mdMissingValue = -9999;
	mbGeoTransformSet = FALSE;
}
HE4_SWATH_Dataset::~HE4_SWATH_Dataset()
{

}

CPLErr HE4_SWATH_Dataset::initialDataset(const int isSimple)
{
	mbIsVirtualDS = FALSE;

	if (ms_CoverageID.empty() || ms_CoverageID == "" || (!ms_CoverageID.empty()
			&& !EQUALN(ms_CoverageID.c_str(),"HDF4_EOS:EOS_SWATH:",19)))
	{
		SetWCS_ErrorLocator("HE4_SWATH_Dataset::initialDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Coverage ID Error.");

		return CE_Failure;
	}

	vector<string> strSet;
	unsigned int n = csvburstCpp(ms_CoverageID, strSet, ':');

	if (n != 5)
	{
		SetWCS_ErrorLocator("HE4_SWATH_Dataset::initialDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Coverage ID Error.");

		return CE_Failure;
	}

	mSrcFilename = strSet[2];
	msDataTypeName = strSet[3];
	msDatasetName = strSet[4];

	mSrcFilename = myStrTrimsIn(mSrcFilename, " \'\"");
	if (!isSimple)
		CPLSetConfigOption("GEOL_AS_GCPS", "FULL");
	else
		CPLSetConfigOption("GEOL_AS_GCPS", "PARTIAL");

	string_replace(ms_CoverageID, "\'", "\"");//Yuanzheng Shao
	GDALDataset* pSrc = (GDALDataset*) GDALOpen(ms_CoverageID.c_str(),
			GA_ReadOnly);
	if (pSrc == NULL)
	{
		SetWCS_ErrorLocator("HE4_SWATH_Dataset::initialDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to open file \"%s\".", mSrcFilename.c_str());

		return CE_Failure;
	}

	msNativeFormat = GDALGetDriverShortName(pSrc->GetDriver());

	if (!EQUAL(msNativeFormat.c_str(),"HDF4Image"))
	{
		GDALClose(pSrc);
		SetWCS_ErrorLocator("HE4_SWATH_Dataset::initialDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to get data format.");

		return CE_Failure;
	}

	//set meta data list
	setMetaDataList(pSrc);

	//set noValue
	unsigned int nBandCount = pSrc->GetRasterCount();
	if (nBandCount < 1)
	{
		GDALClose(pSrc);
		SetWCS_ErrorLocator("HE4_SWATH_Dataset::initialDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to get raster band.");

		return CE_Failure;
	}
	int iSuc = 0;
	double noValue = pSrc->GetRasterBand(1)->GetNoDataValue(&iSuc);
	if (iSuc)
		mdMissingValue = noValue;

	maptrDS.reset(pSrc);

	//set moNativeCRS and mGeoTransform
	if (CE_None != setNativeCRS() || CE_None != setGeoTransform() || CE_None
			!= setGDALDataset(isSimple))
	{
		GDALClose(maptrDS.release());
		return CE_Failure;
	}

	return CE_None;
}

CPLErr HE4_SWATH_Dataset::setGDALDataset(const int isSimple)
{
	if (!mpBandList.empty())
	{
		int iSrcRasterXSize = maptrDS->GetRasterXSize();
		int iSrcRasterYSize = maptrDS->GetRasterYSize();

		//Yuanzheng Shao
		//VRTDataset *poVDS = new VRTDataset(iSrcRasterXSize, iSrcRasterYSize);
		VRTDataset *poVDS = (VRTDataset *)VRTCreate(iSrcRasterXSize, iSrcRasterYSize); 
		if (poVDS == NULL)
		{
			SetWCS_ErrorLocator("HE4_SWATH_Dataset::setGDALDataset()");
			WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
					"Failed to create VRT dataSet.");

			return CE_Failure;
		}

		VRTSourcedRasterBand *poVRTBand = NULL;
		GDALRasterBand *poSrcBand = NULL;
		GDALDataType eBandType;
		for (unsigned int i = 0; i < mpBandList.size(); i++)
		{
			poSrcBand = maptrDS->GetRasterBand(mpBandList[i]);
			if (poSrcBand == NULL)
			{
				GDALClose((GDALDatasetH) poVDS);
				SetWCS_ErrorLocator("HE4_SWATH_Dataset::setGDALDataset()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
						"Failed to get raster band.");

				return CE_Failure;
			}
			eBandType = poSrcBand->GetRasterDataType();
			/* -------------------------------------------------------------------- */
			/*      Create this band.                                               */
			/* -------------------------------------------------------------------- */
			poVDS->AddBand(eBandType, NULL);
			poVRTBand = (VRTSourcedRasterBand *) poVDS->GetRasterBand(i + 1);

			poVRTBand->SetNoDataValue(mdMissingValue);

			if (CE_None != poVRTBand->AddSimpleSource(poSrcBand, 0, 0,
					iSrcRasterXSize, iSrcRasterYSize, 0, 0, iSrcRasterXSize,
					iSrcRasterYSize, NULL, mdMissingValue))
			{
				GDALClose((GDALDatasetH) poVDS);
				SetWCS_ErrorLocator("HE4_SWATH_Dataset::setGDALDataset()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
						"Failed to Add Simple Source into VRT DataSet.");

				return CE_Failure;
			}
		}

		int nGCPs = maptrDS->GetGCPCount();
		GDAL_GCP* pGCPList = (GDAL_GCP*) maptrDS->GetGCPs();
		if (1 > nGCPs || NULL == pGCPList)
		{
			GDALClose((GDALDatasetH) poVDS);
			SetWCS_ErrorLocator("HE4_SWATH_Dataset::setGDALDataset()");
			WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
					"Failed to get GCPs.");

			return CE_Failure;
		}

		char *psTargetSRS = NULL;
		moNativeCRS.exportToWkt(&psTargetSRS);
		if (CE_None != poVDS->SetGCPs(nGCPs, pGCPList, psTargetSRS))
		{
			GDALClose((GDALDatasetH) poVDS);
			OGRFree(psTargetSRS);
			SetWCS_ErrorLocator("HE4_SWATH_Dataset::setGDALDataset()");
			WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
					"Failed to set GCPs.");

			return CE_Failure;
		}
		OGRFree(psTargetSRS);
		GDALClose(maptrDS.release());
		maptrDS.reset(poVDS);
	}

	if (isSimple)
		return CE_None;

	return RectifySWATHDataSet();

}
/*
 CPLErr HE4_SWATH_Dataset::getGeoMinMax(double geoMinMax[])
 {
 if (!mbGeoTransformSet)
 return CE_Failure;

 geoMinMax[0] = mdGeotransform[0]-0.5*mdGeotransform[1];
 geoMinMax[1] = geoMinMax[0]+mi_RectifiedImageXSize*mdGeotransform[1];
 geoMinMax[3] =mdGeotransform[3];
 geoMinMax[2] = geoMinMax[3]+mi_RectifiedImageYSize*mdGeotransform[5];

 return CE_None;
 }*/
CPLErr HE4_SWATH_Dataset::setGeoTransform()
{
	if (CE_None == AbstractDataset::setGeoTransform())
		return CE_None;

	int nGCPs = maptrDS->GetGCPCount();

	OGRSpatialReference oGCPsSRS;
	char *psTargetSRS = (char*) maptrDS->GetGCPProjection();
	if (psTargetSRS && *psTargetSRS != '\0')
	{
		if (OGRERR_NONE != oGCPsSRS.importFromWkt(&psTargetSRS))
			oGCPsSRS=moNativeCRS;
	}
	else if (nGCPs > 0)
	{
		oGCPsSRS=moNativeCRS;
	}
	const GDAL_GCP* pGCPList = maptrDS->GetGCPs();
	if (nGCPs < 2 || NULL == pGCPList)
	{
		mdGeotransform[0] = 0;
		mdGeotransform[1] = 1;
		mdGeotransform[2] = 0;
		mdGeotransform[3] = 0;
		mdGeotransform[4] = 0;
		mdGeotransform[5] = 1;

		mbGeoTransformSet = FALSE;
		return CE_None;
	}

	My2DPoint lowLeft;
	My2DPoint upRight;

	GetCornerPoints(pGCPList, nGCPs, lowLeft, upRight);

	if (CE_None != bBox_transFormmate(oGCPsSRS, moNativeCRS, lowLeft, upRight))
		return CE_Failure;

	double resX = fabs(upRight.mi_X - lowLeft.mi_X) / (maptrDS->GetRasterXSize()
			- 1);
	double resY = fabs(upRight.mi_Y - lowLeft.mi_Y) / (maptrDS->GetRasterYSize()
			- 1);

	resX = MIN(resX,resY);
	resY = MIN(resX,resY);

	mdGeotransform[0] = lowLeft.mi_X;
	mdGeotransform[1] = resX;
	mdGeotransform[2] = 0;
	mdGeotransform[3] = upRight.mi_Y;
	mdGeotransform[4] = 0;
	mdGeotransform[5] = -resY;

	mi_RectifiedImageXSize = fabs(upRight.mi_X - lowLeft.mi_X) / resX + 1;
	mi_RectifiedImageYSize = fabs(upRight.mi_Y - lowLeft.mi_Y) / resY + 1;

	mbGeoTransformSet = TRUE;
	return CE_None;

}

CPLErr HE4_SWATH_Dataset::setMetaDataList(GDALDataset* hSrcDS)
{
	mvtrMeteDataList.push_back(
			"Product_Description=The image data be created by WCS from HDF4_EOS_SWATH data.");
	char **papszMetadata = NULL;
	papszMetadata = hSrcDS->GetMetadata("");

	for (int i = 0; i < CSLCount((char**) papszMetadata); ++i)
	{
		if (!EQUALN(papszMetadata[i],"WESTBOUNDINGCOORDINATE",22)
				&&
				!EQUALN(papszMetadata[i],"EASTBOUNDINGCOORDINATE",23)
				&&
				!EQUALN(papszMetadata[i],"SOUTHBOUNDINGCOORDINATE",22)
				&&
				!EQUALN(papszMetadata[i],"NORTHBOUNDINGCOORDINATE",22))
		{
			mvtrMeteDataList.push_back(papszMetadata[i]);
		}
	}
	return CE_None;
}
CPLErr HE4_SWATH_Dataset::setNativeCRS()
{
	if (CE_None == AbstractDataset::setNativeCRS())
		return CE_None;

	char *psTargetSRS = (char*) maptrDS->GetGCPProjection();
	if (psTargetSRS && *psTargetSRS != '\0')
	{
		if (OGRERR_NONE != moNativeCRS.importFromWkt(&psTargetSRS))
			moNativeCRS.SetWellKnownGeogCS("WGS84");
	}
	else if (maptrDS->GetGCPCount() > 0)
	{
		moNativeCRS.SetWellKnownGeogCS("WGS84");
	}
	else
	{
		SetWCS_ErrorLocator("HE4_SWATH_Dataset::setNativeCRS()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to generate CRS.");

		return CE_Failure;
	}
	return CE_None;
}

CPLErr HE4_SWATH_Dataset::RectifySWATHDataSet()
{

	GDALDriverH poDriver = GDALGetDriverByName("MEM");
	GDALDataset* sw_DataSet = (GDALDataset*) GDALCreate(poDriver, "",
			mi_RectifiedImageXSize, mi_RectifiedImageYSize,
			maptrDS->GetRasterCount(),
			maptrDS->GetRasterBand(1)->GetRasterDataType(), NULL);
	if (NULL == sw_DataSet)
	{
		GDALClose(poDriver);
		SetWCS_ErrorLocator("HE4_SWATH_Dataset::RectifySWATHDataSet()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to create \"MEM\" dataSet.");

		return CE_Failure;
	}

	char *pszDstWKT;
	moNativeCRS.exportToWkt(&pszDstWKT);

	sw_DataSet->SetProjection(pszDstWKT);
	sw_DataSet->SetGeoTransform(mdGeotransform);

	/* -------------------------------------------------------------------- */
	/*      reprojection.                                                   */
	/* -------------------------------------------------------------------- */

	if (CE_None != GDALReprojectImage(maptrDS.get(), NULL, sw_DataSet,
			pszDstWKT, GRA_NearestNeighbour, 0, 0, NULL, NULL, NULL))
	{
		GDALClose(sw_DataSet);
		GDALClose(poDriver);
		OGRFree(pszDstWKT);
		SetWCS_ErrorLocator("HE4_SWATH_Dataset::RectifySWATHDataSet()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to Reproject Image.");

		return CE_Failure;
	}

	OGRFree(pszDstWKT);
	GDALClose(maptrDS.release());
	maptrDS.reset(sw_DataSet);
	return CE_None;
}
