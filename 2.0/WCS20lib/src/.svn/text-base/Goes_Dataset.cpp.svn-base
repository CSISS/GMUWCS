#include "Goes_Dataset.h"
#include "netcdfcpp.h"

using namespace std;

#define GOES_TIME_DEBUG FALSE

Goes_Dataset::Goes_Dataset()
{
}

Goes_Dataset::Goes_Dataset(const string& id, vector<int> &rBandList) :
	AbstractDataset(id, rBandList)
{
	mdMissingValue = -9999.0;
	mbGeoTransformSet = FALSE;
	mb_GoesAcrossCM = FALSE;
	mb_PassedBBox = FALSE;
}

Goes_Dataset::~Goes_Dataset()
{
}

CPLErr Goes_Dataset::initialDataset(const int isSimple)
{
	mbIsVirtualDS = FALSE;

	if (ms_CoverageID.empty() || ms_CoverageID == "")
		return CE_Failure;
	vector<string> strSet;
	unsigned int n = csvburstCpp(ms_CoverageID, strSet, ':');
	if (n != 4)
	{
		SetWCS_ErrorLocator("Goes_Dataset::initialDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Incorrect coverage ID.");

		return CE_Failure;
	}

	msDataTypeName = strSet[0] + ":" + strSet[1];
	mSrcFilename = strSet[2];
	msDatasetName = strSet[3];

	m_ncLatDataSetName = "NETCDF:" + mSrcFilename + ":latitude";
	m_ncLonDataSetName = "NETCDF:" + mSrcFilename + ":longitude";
	m_ncCoverageIDName = strSet[1] + ":" + mSrcFilename + ":" + msDatasetName;

	mSrcFilename = myStrTrimsIn(mSrcFilename, " \'\"");
	string_replace(m_ncCoverageIDName, "\'", "\"");
	string_replace(m_ncLatDataSetName, "\'", "\"");
	string_replace(m_ncLonDataSetName, "\'", "\"");

	GDALDataset* pSrc = (GDALDataset*) GDALOpenShared(m_ncCoverageIDName.c_str(), GA_ReadOnly);
	if (pSrc == NULL)
	{
		SetWCS_ErrorLocator("Goes_Dataset::initialDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to open the coverage  \"%s\".", m_ncCoverageIDName.c_str());

		return CE_Failure;
	}

	msNativeFormat = GDALGetDriverShortName(pSrc->GetDriver());
	if (!EQUAL(msNativeFormat.c_str(),"NETCDF"))
	{
		GDALClose(pSrc);
		return CE_Failure;
	}

	//setmetalist
	setMetaDataList(pSrc);

	//set noValue
	unsigned int nBandCount = pSrc->GetRasterCount();
	if (nBandCount < 1)
	{
		GDALClose(pSrc);
		SetWCS_ErrorLocator("Goes_Dataset::initialDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to get band data.");

		return CE_Failure;
	}
	int iSuc = 0;
	double noValue = pSrc->GetRasterBand(1)->GetNoDataValue(&iSuc);
	if (iSuc)
		mdMissingValue = noValue;

	maptrDS.reset(pSrc);

	//set moNativeCRS and mGeoTransform
	if (CE_None != setNativeCRS() || CE_None != setGeoTransform())
	{
		GDALClose(maptrDS.release());
		return CE_Failure;
	}

	if(mb_GoesAcrossCM && mb_PassedBBox)//Across CM && assign bbox (getcoverage operation)
		return RectifyGOESDataSetAcrossCM();
	else
		return setGDALDataset(isSimple);
}

CPLErr Goes_Dataset::setNativeCRS()
{
	if (CE_None == AbstractDataset::setNativeCRS())
		return CE_None;
	//set moNativeCRS
	char* wktStr = (char*) maptrDS->GetProjectionRef();
	if (NULL == wktStr || EQUAL(wktStr,""))
	{
		GDALDataset* hLatDS = (GDALDataset*) GDALOpen(m_ncLatDataSetName.c_str(), GA_ReadOnly);
		GDALDataset* hLonDS = (GDALDataset*) GDALOpen(m_ncLonDataSetName.c_str(), GA_ReadOnly);

		if(hLatDS == NULL)
		{
			m_ncLatDataSetName = "NETCDF:\"" + mSrcFilename + "\":lat";
			hLatDS = (GDALDataset*) GDALOpen(m_ncLatDataSetName.c_str(), GA_ReadOnly);
		}
		if(hLonDS == NULL)
		{
			m_ncLonDataSetName = "NETCDF:\"" + mSrcFilename + "\":lon";
			hLonDS = (GDALDataset*) GDALOpen(m_ncLonDataSetName.c_str(), GA_ReadOnly);
		}

		if (hLatDS == NULL || hLonDS == NULL)
		{
			SetWCS_ErrorLocator("Goes_Dataset::setNativeCRS()");
			WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to open Lat/Lon sub-DataSet.");
			return CE_Failure;
		}

		moNativeCRS.SetWellKnownGeogCS("WGS84");
		GDALClose(hLatDS);
		GDALClose(hLonDS);
		return CE_None;
	}
	moNativeCRS.SetLocalCS("OGC:ImageCRS");
	return CE_None;

}

CPLErr Goes_Dataset::setGeoTransform()
{
	if (CE_None == AbstractDataset::setGeoTransform())
		return CE_None;

	if (CE_None != setGeoBBoxAndGCPs(maptrDS.get()))
		return CE_Failure;

	double resX, resY;
	if (mdSrcGeoMinX > mdSrcGeoMaxX && mdSrcGeoMinX > 0 && mdSrcGeoMaxX < 0)
		resX = (360 + mdSrcGeoMaxX - mdSrcGeoMinX) / (maptrDS->GetRasterXSize()	- 1);
	else
		resX = (mdSrcGeoMaxX - mdSrcGeoMinX) / (maptrDS->GetRasterXSize() - 1);

	resY = (mdSrcGeoMaxY - mdSrcGeoMinY) / (maptrDS->GetRasterYSize() - 1);

	double res = MIN(resX,resY);

	if (mdSrcGeoMinX > mdSrcGeoMaxX && mdSrcGeoMinX > 0 && mdSrcGeoMaxX < 0)
		mi_RectifiedImageXSize = (int)((360 + mdSrcGeoMaxX - mdSrcGeoMinX) / res) + 1;
	else
		mi_RectifiedImageXSize = (int)((mdSrcGeoMaxX - mdSrcGeoMinX) / res) + 1;

	mi_RectifiedImageYSize = (int)fabs((mdSrcGeoMaxY - mdSrcGeoMinY) / res) + 1;

	mdGeotransform[0] = mdSrcGeoMinX;
	mdGeotransform[1] = res;
	mdGeotransform[2] = 0;
	mdGeotransform[3] = mdSrcGeoMaxY;
	mdGeotransform[4] = 0;
	mdGeotransform[5] = -res;

	mbGeoTransformSet = TRUE;
	return CE_None;
}

CPLErr Goes_Dataset::setResampleStandard(GDALDataset* hSrcDS, int& xRSValue, int& yRSValue)
{
	static int RESAMPLE_STANDARD = 500;
	int nXSize = hSrcDS->GetRasterXSize();
	int nYSize = hSrcDS->GetRasterYSize();

	xRSValue = int(nXSize / RESAMPLE_STANDARD) + 2;
	yRSValue = int(nYSize / RESAMPLE_STANDARD) + 2;

	return CE_None;
}


CPLErr Goes_Dataset::setGeoBBoxAndGCPs(GDALDataset* poVDS)
{

clock_t start, finish;
double duration;
if(GOES_TIME_DEBUG)
{
start = clock();
}

	GDALDataset* hLatDS = (GDALDataset*) GDALOpen(m_ncLatDataSetName.c_str(), GA_ReadOnly);
	GDALDataset* hLonDS = (GDALDataset*) GDALOpen(m_ncLonDataSetName.c_str(), GA_ReadOnly);
	if (hLatDS == NULL || hLonDS == NULL) {
		SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to open latitude and longitude sub-dataSet.");
		return CE_Failure;
	}

	int nXSize = poVDS->GetRasterXSize();
	int nYSize = poVDS->GetRasterYSize();

	mi_GoesSrcImageXSize = nXSize;
	mi_GoesSrcImageYSize = nYSize;

	int nLatXSize = hLatDS->GetRasterXSize();
	int nLatYSize = hLatDS->GetRasterYSize();
	int nLonXSize = hLonDS->GetRasterXSize();
	int nLonYSize = hLonDS->GetRasterYSize();

	if (nXSize != nLatXSize || nLatXSize != nLonXSize
			|| nYSize != nLatYSize || nLatYSize != nLonYSize)
	{
		GDALClose(hLatDS);
		GDALClose(hLonDS);
		if (hLatDS == NULL || hLonDS == NULL) {
			SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
			WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Error in read data from Lat/Lon dataSet.");
			return CE_Failure;
		}
	}

	/*
	*	Resample Standards:
	*	Height | Wdith
	*	(0, 500)		every other one pixel
	*	[500, 1000)		every other two pixel
	*	[1000,1500)		every other three pixels
	*	[1500,2000)		every other four pixels
	*	... ...
	*/

	int xSpace = 1;
	int ySpace = 1;
	setResampleStandard(poVDS, xSpace, ySpace);

	int nGCPs = 0;
	GDAL_GCP gdalCGP;

	GDALRasterBand *poBandLat = hLatDS->GetRasterBand(1);
	GDALRasterBand *poBandLon = hLonDS->GetRasterBand(1);
	GDALDataType eDT = poBandLat->GetRasterDataType();
	void *dataLat = NULL;
	void *dataLon = NULL;

	mdSrcGeoMinX = 360;
	mdSrcGeoMaxX = -360;
	mdSrcGeoMinY = 90;
	mdSrcGeoMaxY = -90;

	double minPosLon = 180;
	double maxPosLon = 0;
	double minNegLon = 0;
	double maxNegLon = -180;
	bool bNeg = false;
	bool bPos = false;

	switch (eDT)
	{
	case GDT_Byte:
	{
		dataLat = (GByte *) CPLMalloc(nXSize * sizeof(GByte));
		dataLon = (GByte *) CPLMalloc(nXSize * sizeof(GByte));
		if (!dataLat || !dataLon)
		{
			GDALClose((GDALDatasetH) hLatDS);
			GDALClose((GDALDatasetH) hLonDS);
			{
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}
		}
		for (int iLine = 0; iLine < nYSize; ++iLine)
		{
			if (CE_None != poBandLat->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLat, nXSize, 1, GDT_Byte, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((GByte *) dataLat);
				VSIFree((GByte *) dataLon);
				{
					SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
					WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "RasterIO error.");
					return CE_Failure;
				}
			}
			if (CE_None != poBandLon->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLon, nXSize, 1, GDT_Byte, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((GByte *) dataLat);
				VSIFree((GByte *) dataLon);
				{
					SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
					WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "RasterIO error.");
					return CE_Failure;
				}
			}
			for (int iPixel = 0; iPixel < nXSize; ++iPixel)
			{
				double x = *((GByte *) dataLon + iPixel);
				double y = *((GByte *) dataLat + iPixel);
				if (isValidLongitude(x) && isValidLatitude(y))
				{
					char pChr[64];
					sprintf(pChr, "%d", ++nGCPs);
					GDALInitGCPs(1, &gdalCGP);
					gdalCGP.pszId = strdup(pChr);
					gdalCGP.pszInfo = strdup("");
					gdalCGP.dfGCPLine = iLine;
					gdalCGP.dfGCPPixel = iPixel;
					gdalCGP.dfGCPX = x;
					gdalCGP.dfGCPY = y;
					gdalCGP.dfGCPZ = 0;
					m_gdalGCPs.push_back(gdalCGP);
					mdSrcGeoMinX = MIN(mdSrcGeoMinX,gdalCGP.dfGCPX );
					mdSrcGeoMaxX = MAX(mdSrcGeoMaxX,gdalCGP.dfGCPX);
					mdSrcGeoMinY = MIN(mdSrcGeoMinY,gdalCGP.dfGCPY);
					mdSrcGeoMaxY = MAX(mdSrcGeoMaxY,gdalCGP.dfGCPY);
				}
			}
		}
		VSIFree((GByte *) dataLat);
		VSIFree((GByte *) dataLon);
	}
		break;
	case GDT_UInt16:
	case GDT_Int16:
	{
		dataLat = (GInt16 *) CPLMalloc(nXSize * sizeof(GInt16));
		dataLon = (GInt16 *) CPLMalloc(nXSize * sizeof(GInt16));
		if (!dataLat || !dataLon)
		{
			GDALClose((GDALDatasetH) hLatDS);
			GDALClose((GDALDatasetH) hLonDS);
			{
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
						"Failed to allocate memory.");

				return CE_Failure;
			}
		}
		for (int iLine = 0; iLine < nYSize; ++iLine)
		{

			if (CE_None != poBandLat->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLat, nXSize, 1, GDT_UInt16, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((GInt16 *) dataLat);
				VSIFree((GInt16 *) dataLon);
				{
					SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
					WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
							"RasterIO error.");

					return CE_Failure;
				}
			}
			if (CE_None != poBandLon->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLon, nXSize, 1, GDT_UInt16, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((GInt16 *) dataLat);
				VSIFree((GInt16 *) dataLon);
				{
					SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
					WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "RasterIO error.");
					return CE_Failure;
				}
			}
			for (int iPixel = 0; iPixel < nXSize; ++iPixel)
			{
				double x = *((GInt16 *) dataLon + iPixel);
				double y = *((GInt16 *) dataLat + iPixel);
				if (isValidLongitude(x) && isValidLatitude(y))
				{

					char pChr[64];
					sprintf(pChr, "%d", ++nGCPs);
					GDALInitGCPs(1, &gdalCGP);
					gdalCGP.pszId = strdup(pChr);
					gdalCGP.pszInfo = strdup("");
					gdalCGP.dfGCPLine = iLine;
					gdalCGP.dfGCPPixel = iPixel;
					gdalCGP.dfGCPX = x;
					gdalCGP.dfGCPY = y;
					gdalCGP.dfGCPZ = 0;
					m_gdalGCPs.push_back(gdalCGP);
					mdSrcGeoMinX = MIN(mdSrcGeoMinX,gdalCGP.dfGCPX );
					mdSrcGeoMaxX = MAX(mdSrcGeoMaxX,gdalCGP.dfGCPX);
					mdSrcGeoMinY = MIN(mdSrcGeoMinY,gdalCGP.dfGCPY);
					mdSrcGeoMaxY = MAX(mdSrcGeoMaxY,gdalCGP.dfGCPY);
				}
			}
		}
		VSIFree((GInt16 *) dataLat);
		VSIFree((GInt16 *) dataLon);
	}
		break;
	case GDT_UInt32:
	case GDT_Int32:
	{
		dataLat = (GInt32 *) CPLMalloc(nXSize * sizeof(GInt32));
		dataLon = (GInt32 *) CPLMalloc(nXSize * sizeof(GInt32));
		if (!dataLat || !dataLon)
		{
			GDALClose((GDALDatasetH) hLatDS);
			GDALClose((GDALDatasetH) hLonDS);
			{
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}
		}
		for (int iLine = 0; iLine < nYSize; ++iLine)
		{
			if (CE_None != poBandLat->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLat, nXSize, 1, GDT_UInt32, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((GInt32 *) dataLat);
				VSIFree((GInt32 *) dataLon);
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}
			if (CE_None != poBandLon->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLon, nXSize, 1, GDT_UInt32, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((GInt32 *) dataLat);
				VSIFree((GInt32 *) dataLon);
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}
			for (int iPixel = 0; iPixel < nXSize; ++iPixel)
			{
				double x = *((GInt32 *) dataLon + iPixel);
				double y = *((GInt32 *) dataLat + iPixel);
				if (isValidLongitude(x) && isValidLatitude(y))
				{
					char pChr[64];
					sprintf(pChr, "%d", ++nGCPs);
					GDALInitGCPs(1, &gdalCGP);
					gdalCGP.pszId = strdup(pChr);
					gdalCGP.pszInfo = strdup("");
					gdalCGP.dfGCPLine = iLine;
					gdalCGP.dfGCPPixel = iPixel;
					gdalCGP.dfGCPX = x;
					gdalCGP.dfGCPY = y;
					gdalCGP.dfGCPZ = 0;
					m_gdalGCPs.push_back(gdalCGP);
					mdSrcGeoMinX = MIN(mdSrcGeoMinX,gdalCGP.dfGCPX );
					mdSrcGeoMaxX = MAX(mdSrcGeoMaxX,gdalCGP.dfGCPX);
					mdSrcGeoMinY = MIN(mdSrcGeoMinY,gdalCGP.dfGCPY);
					mdSrcGeoMaxY = MAX(mdSrcGeoMaxY,gdalCGP.dfGCPY);
				}
			}
		}
		VSIFree((GInt32 *) dataLat);
		VSIFree((GInt32 *) dataLon);
	}
		break;
	case GDT_Float32:
	{
		dataLat = (float *) CPLMalloc(nXSize * sizeof(float));
		dataLon = (float *) CPLMalloc(nXSize * sizeof(float));
		if (!dataLat || !dataLon)
		{
			GDALClose((GDALDatasetH) hLatDS);
			GDALClose((GDALDatasetH) hLonDS);
			{
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
						"Failed to allocate memory.");

				return CE_Failure;
			}
		}
		for (int iLine = 0; iLine < nYSize; iLine += ySpace)//Yuanzheng Shao
		{
			if (iLine >= nYSize)
				iLine = nYSize - 1;

			if (CE_None != poBandLat->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLat, nXSize, 1, GDT_Float32, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((float *) dataLat);
				VSIFree((float *) dataLon);
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}
			if (CE_None != poBandLon->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLon, nXSize, 1, GDT_Float32, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((float *) dataLat);
				VSIFree((float *) dataLon);
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}
			for (int iPixel = 0; iPixel < nXSize; iPixel += xSpace)
			{
				if(iPixel >= nXSize)
					iPixel = nXSize - 1;
				double x = *((float *) dataLon + iPixel);
				double y = *((float *) dataLat + iPixel);
				if (isValidLongitude(x) && isValidLatitude(y))
				{
					char pChr[64];
					sprintf(pChr, "%d", ++nGCPs);
					GDALInitGCPs(1, &gdalCGP);
					gdalCGP.pszId = strdup(pChr);
					gdalCGP.pszInfo = strdup("");
					gdalCGP.dfGCPLine = iLine;
					gdalCGP.dfGCPPixel = iPixel;
					gdalCGP.dfGCPX = x;
					gdalCGP.dfGCPY = y;
					gdalCGP.dfGCPZ = 0;
					m_gdalGCPs.push_back(gdalCGP);
					mdSrcGeoMinX = MIN(mdSrcGeoMinX,gdalCGP.dfGCPX );
					mdSrcGeoMaxX = MAX(mdSrcGeoMaxX,gdalCGP.dfGCPX);
					mdSrcGeoMinY = MIN(mdSrcGeoMinY,gdalCGP.dfGCPY);
					mdSrcGeoMaxY = MAX(mdSrcGeoMaxY,gdalCGP.dfGCPY);

					if(gdalCGP.dfGCPX >= 0)
					{
						bPos = true;
						minPosLon = MIN(minPosLon, gdalCGP.dfGCPX);
						maxPosLon = MAX(maxPosLon, gdalCGP.dfGCPX);
					}else
					{
						bNeg = true;
						minNegLon = MIN(minNegLon, gdalCGP.dfGCPX);
						maxNegLon = MAX(maxNegLon, gdalCGP.dfGCPX);
					}
				}
			}
		}

		if(bPos && bNeg)
		{
			double longdiff = minNegLon + 360 - maxPosLon;
			if(longdiff < 2.0)
			{
				mb_GoesAcrossCM = TRUE;
				mdSrcGeoMinX = minPosLon;
				mdSrcGeoMaxX = maxNegLon;
			}else
				mb_GoesAcrossCM = FALSE;
		}

		VSIFree((float *) dataLat);
		VSIFree((float *) dataLon);
	}
		break;
	case GDT_Float64:
	{
		dataLat = (double *) CPLMalloc(nXSize * sizeof(double));
		dataLon = (double *) CPLMalloc(nXSize * sizeof(double));
		if (!dataLat || !dataLon)
		{
			GDALClose((GDALDatasetH) hLatDS);
			GDALClose((GDALDatasetH) hLonDS);
			{
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}
		}

		for (int iLine = 0; iLine < nYSize; iLine += ySpace)
		{
			if (iLine >= nYSize)
				iLine = nYSize - 1;
			if (CE_None != poBandLat->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLat, nXSize, 1, GDT_Float64, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((double *) dataLat);
				VSIFree((double *) dataLon);
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}

			if (CE_None != poBandLon->RasterIO(GF_Read, 0, iLine, nXSize, 1,
					dataLon, nXSize, 1, GDT_Float64, 0, 0))
			{
				GDALClose((GDALDatasetH) hLatDS);
				GDALClose((GDALDatasetH) hLonDS);
				VSIFree((double *) dataLat);
				VSIFree((double *) dataLon);
				SetWCS_ErrorLocator("Goes_Dataset::setGeoBBoxAndGCPs()");
				WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to allocate memory.");
				return CE_Failure;
			}
			for (int iPixel = 0; iPixel < nXSize; iPixel += xSpace)
			{
				if(iPixel >= nXSize)
					iPixel = nXSize - 1;
				double x = *((double *) dataLon + iPixel);
				double y = *((double *) dataLat + iPixel);
				if (isValidLongitude(x) && isValidLatitude(y))
				{
					char pChr[64];
					sprintf(pChr, "%d", ++nGCPs);
					GDALInitGCPs(1, &gdalCGP);
					gdalCGP.pszId = strdup(pChr);
					gdalCGP.pszInfo = strdup("");
					gdalCGP.dfGCPLine = iLine;
					gdalCGP.dfGCPPixel = iPixel;
					gdalCGP.dfGCPX = x;
					gdalCGP.dfGCPY = y;
					gdalCGP.dfGCPZ = 0;
					m_gdalGCPs.push_back(gdalCGP);
					mdSrcGeoMinX = MIN(mdSrcGeoMinX,gdalCGP.dfGCPX );
					mdSrcGeoMaxX = MAX(mdSrcGeoMaxX,gdalCGP.dfGCPX);
					mdSrcGeoMinY = MIN(mdSrcGeoMinY,gdalCGP.dfGCPY);
					mdSrcGeoMaxY = MAX(mdSrcGeoMaxY,gdalCGP.dfGCPY);
				}
			}
		}
		VSIFree((double *) dataLat);
		VSIFree((double *) dataLon);
	}
		break;
	default:
		break;
	}

	GDALClose((GDALDatasetH) hLatDS);
	GDALClose((GDALDatasetH) hLonDS);

if(GOES_TIME_DEBUG)
{
finish = clock();
duration = (double)(finish-start)/CLOCKS_PER_SEC;
cout<<"Execute time in Goes_Dataset::setGeoBBoxAndGCPs is: "<<duration<<endl;
}

	return CE_None;
}

CPLErr Goes_Dataset::setGDALDataset(const int isSimple)
{
	if(mpBandList.empty())
	{
		for(int i=1;i<=maptrDS->GetRasterCount();++i)
		{
			mpBandList.push_back(i);
		}
	}

	VRTDataset *poVDS = (VRTDataset *)VRTCreate(mi_RectifiedImageXSize, mi_RectifiedImageYSize);
	if (poVDS == NULL)
	{
		SetWCS_ErrorLocator("Goes_Dataset::setGDALDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to create VRT DataSet.");
		return CE_Failure;
	}

	VRTSourcedRasterBand *poVRTBand = NULL;
	GDALRasterBand *poSrcBand = NULL;
	GDALDataType eBandType;
	for (unsigned int i = 0; i < mpBandList.size(); i++)
	{
		poSrcBand = maptrDS->GetRasterBand(mpBandList[i]);
		if (poSrcBand == NULL)
		{
			GDALClose((GDALDatasetH) poVDS);
			WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "The original NetCDF data does not include the band \"%d\".", mpBandList[i]);
			SetWCS_ErrorLocator("Goes_Dataset::setGDALDataset()");
			return CE_Failure;
		}
		eBandType = poSrcBand->GetRasterDataType();
		/* -------------------------------------------------------------------- */
		/*      Create this band.                                               */
		/* -------------------------------------------------------------------- */
		poVDS->AddBand(eBandType, NULL);
		poVRTBand = (VRTSourcedRasterBand *) poVDS->GetRasterBand(i + 1);

		poVRTBand->SetNoDataValue(mdMissingValue);

		if (CE_None != poVRTBand->AddSimpleSource(poSrcBand, 0, 0,
				mi_RectifiedImageXSize, mi_RectifiedImageYSize, 0, 0, mi_RectifiedImageXSize,
				mi_RectifiedImageYSize, NULL, mdMissingValue))
		{
			GDALClose((GDALDatasetH) poVDS);
			SetWCS_ErrorLocator("Goes_Dataset::setGDALDataset()");
			WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
					"Failed to Add Simple Source into VRT DataSet.");

			return CE_Failure;
		}
	}

	//set GCPs for this VRTDataset
	if (CE_None != setGCPGeoRef4VRTDataset(poVDS))
	{
		GDALClose((GDALDatasetH) poVDS);
		return CE_Failure;
	}
	GDALClose(maptrDS.release());
	maptrDS.reset(poVDS);

	if (isSimple)
		return CE_None;

	return RectifyGOESDataSet();
}

CPLErr Goes_Dataset::setGCPGeoRef4VRTDataset(GDALDataset* poVDS)
{
clock_t start, finish;
double duration;
if(GOES_TIME_DEBUG)
{
start = clock();
}
	char* psTargetSRS;
	moNativeCRS.exportToWkt(&psTargetSRS);

#if (__GNUC__ >=4 && __GNUC_MINOR__ > 1)
	if (CE_None != poVDS->SetGCPs(m_gdalGCPs.size(),
			(GDAL_GCP*) (m_gdalGCPs.data()), psTargetSRS))
	{
		OGRFree(psTargetSRS);
		SetWCS_ErrorLocator("Goes_Dataset::setGCPGeoRef4VRTDataset()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Failed to set GCPs.");
		return CE_Failure;
	}
#else
	{
		if(CE_None!=poVDS->SetGCPs(m_gdalGCPs.size(), (GDAL_GCP*)&m_gdalGCPs[0], psTargetSRS))
		{
			OGRFree( psTargetSRS );
			SetWCS_ErrorLocator("Goes_Dataset::setGCPGeoRef4VRTDataset()");
			WCS_Error(CE_Failure,OGC_WCS_NoApplicableCode,"Failed to set GCPs.");

			return CE_Failure;
		}
	}
#endif

if(GOES_TIME_DEBUG)
{
finish = clock();
duration = (double)(finish-start)/CLOCKS_PER_SEC;
cout<<"Execute time in Goes_Dataset::setGCPGeoRef4VRTDataset is: "<<duration<<endl;
}

	OGRFree(psTargetSRS);
	return CE_None;
}

CPLErr Goes_Dataset::setMetaDataList(GDALDataset* hSrc)
{
	mvtrMeteDataList.push_back("Product_Description=This file was created by CSISS-WCS from NetCDF/GOES_GVAR data. See http://www.csiss.gmu.edu to get more information");

	NcFile ncFile(mSrcFilename.c_str(), NcFile::ReadOnly);
	if (!ncFile.is_valid())
	{
		SetWCS_ErrorLocator("Goes_Dataset::setMetaDataList()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode, "Invalid NetCDF file.");

		return CE_Failure;
	}

	int varNum = ncFile.num_vars();
	for (int i = 0; i < varNum; i++)
	{
		NcVar* curVar = ncFile.get_var(i);
		NcValues* curVarValues = curVar->values();
		string curVarName = curVar->name();
		//ignore the variable with more values, such as data.
		if( EQUAL(curVarName.c_str(), "bands") || EQUAL(curVarName.c_str(), "auditTrail") ||
			EQUAL(curVarName.c_str(), "data") || EQUAL(curVarName.c_str(), "latitude") ||
			EQUAL(curVarName.c_str(), "longitude") || EQUAL(curVarName.c_str(), "lat") ||
			EQUAL(curVarName.c_str(), "lon") || curVarValues->num() > 1 )
		continue;

		string curVarValue = curVarValues->as_string(0);
		mvtrMeteDataList.push_back(curVarName + "=" + curVarValue);
	}

	return CE_None;
}
CPLErr Goes_Dataset::getGeoMinMax(double geoMinMax[])
{
	if (!mbGeoTransformSet)
		return CE_Failure;

	geoMinMax[0] = mdSrcGeoMinX;
	geoMinMax[2] = mdSrcGeoMinY;
	geoMinMax[1] = mdSrcGeoMaxX;
	geoMinMax[3] = mdSrcGeoMaxY;

	return CE_None;
}

CPLErr Goes_Dataset::setLatLonRequestBBox(double llbox[])
{
	if(llbox != NULL)
	{
		for(int i = 0; i < 4; i++)
			mb_LatLonBBox[i] = llbox[i];
		mb_PassedBBox = TRUE;
	}else
		mb_PassedBBox = FALSE;

	return CE_None;
}

/**
* Function Name:	BilinearInterpolation
* Parameters:
*	GDALRasterBand * pBand: The Raster Band, corresponding to the raster
*	int line/pixel:			The position of the target pixel
*	double rasteredBBox:	The line/pixels extend corresponsding to request lat/lon
*	double validValue:		Threshold value of the interpolation; the pixel graeter than this value is to participate interpolation
* Return:
*	return the interpolated value.
*/
double BilinearInterpolation(GDALRasterBand * pBand, int line, int pixel, int rasteredBBox[], double validValue)
{
	void *tempData = (float *) CPLMalloc(sizeof(float));

	int rsStratX = rasteredBBox[0];
	int rsEndX = rasteredBBox[1];
	int rsStratY = rasteredBBox[2];
	int rsEndY = rasteredBBox[3];

	double leftFound = 0;
	double rightFound = 0;
	double upFound = 0;
	double downFound = 0;

	int xleftPos = pixel;
	int xrightPos = pixel;
	int yupPos = line;
	int ydownPos = line;

	//left
	for(int i = pixel-1; i >= rsStratX; i--)
	{
		pBand->RasterIO(GF_Read, i, line, 1, 1, tempData, 1, 1, GDT_Float32, 0, 0);
		double curV = *((float *) tempData);
		if(curV > validValue)
		{
			xleftPos = i;
			leftFound = curV;
			break;
		}
	}

	//right
	for(int i = pixel+1; i < rsEndX; i++)
	{
		pBand->RasterIO(GF_Read, i, line, 1, 1, tempData, 1, 1, GDT_Float32, 0, 0);
		double curV = *((float *) tempData);
		if(curV > validValue)
		{
			xrightPos = i;
			rightFound = curV;
			break;
		}
	}

	//up
	for(int i = line-1; i >= rsStratY; i--)
	{
		pBand->RasterIO(GF_Read, pixel, i, 1, 1, tempData, 1, 1, GDT_Float32, 0, 0);
		double curV = *((float *) tempData);
		if(curV > validValue)
		{
			yupPos = i;
			upFound = curV;
			break;
		}
	}

	//down
	for(int i = line+1; i < rsEndY; i++)
	{
		pBand->RasterIO(GF_Read, pixel, i, 1, 1, tempData, 1, 1, GDT_Float32, 0, 0);
		double curV = *((float *) tempData);
		if(curV > validValue)
		{
			ydownPos = i;
			downFound = curV;
			break;
		}
	}

	int xDiff = xrightPos - xleftPos;
	int yDiff = ydownPos - yupPos;
	double xFixedV;
	double yFixedV;

	int upDis = line - yupPos;
	int downDis = ydownPos - line;
	int leftDis = pixel - xleftPos;
	int rightDis = xrightPos - pixel;

	bool xDirMissing = (leftDis == 0 || rightDis == 0) ? true:false;
	bool yDirMissing = (upDis == 0 || downDis == 0) ? true:false;

	if(xDirMissing || yDirMissing)
	{
		if(yDirMissing && !xDirMissing)
		{
			yFixedV = (upDis==0) ? downFound : upFound;
			double ratio = (double)rightDis/xDiff;
			xFixedV = ratio * leftFound + (1 - ratio) * rightFound;
		}
		else if(!yDirMissing && xDirMissing)
		{
			xFixedV = (leftDis==0) ? rightFound : leftFound;
			double ratio = (double)downDis/yDiff;
			yFixedV = ratio * upFound + (1 - ratio) * downFound;
		}
		else
		{
			xFixedV = (leftDis==0) ? rightFound : leftFound;
			yFixedV = (upDis==0) ? downFound : upFound;
		}
	}
	else
	{
		double xratio = (double)rightDis/xDiff;
		double yratio = (double)downDis/yDiff;
		xFixedV = xratio * leftFound + (1 - xratio) * rightFound;
		yFixedV = yratio * upFound + (1 - yratio) * downFound;
	}

	VSIFree((float *) tempData);
	return (xFixedV + yFixedV)/2;
}

CPLErr Goes_Dataset::RectifyGOESDataSetAcrossCM()
{

clock_t start, finish;
double duration;
if(GOES_TIME_DEBUG)
{
start = clock();
}

	int rasteredStartX = mi_RectifiedImageXSize;
	int rasteredEndX = 0;
	int rasteredStartY = mi_RectifiedImageYSize;
	int rasteredEndY = 0;
	double dataValueMax = -1000000;
	double dataValueMin = 1000000;

	char *pszDstWKT;
	moNativeCRS.exportToWkt(&pszDstWKT);

	GDALDriverH poDriver = GDALGetDriverByName("MEM");
	GDALDataset* sw_DataSet = (GDALDataset*) GDALCreate(poDriver, "", mi_RectifiedImageXSize,
			mi_RectifiedImageYSize, maptrDS->GetRasterCount(), maptrDS->GetRasterBand(1)->GetRasterDataType(), NULL);
	GDALDataset* sw_DataSet2 = (GDALDataset*) GDALCreate(poDriver, "", mi_RectifiedImageXSize,
			mi_RectifiedImageYSize, maptrDS->GetRasterCount(), maptrDS->GetRasterBand(1)->GetRasterDataType(), NULL);

	sw_DataSet->SetProjection(pszDstWKT);
	sw_DataSet->SetGeoTransform(mdGeotransform);
	sw_DataSet2->SetProjection(pszDstWKT);
	sw_DataSet2->SetGeoTransform(mdGeotransform);

	GDALDataset* hLatDS = (GDALDataset*) GDALOpen(m_ncLatDataSetName.c_str(), GA_ReadOnly);
	GDALDataset* hLonDS = (GDALDataset*) GDALOpen(m_ncLonDataSetName.c_str(), GA_ReadOnly);
	GDALDataset* hDataDS = (GDALDataset*) GDALOpen(m_ncCoverageIDName.c_str(), GA_ReadOnly);

	GDALRasterBand *poBandLat = hLatDS->GetRasterBand(1);
	GDALRasterBand *poBandLon = hLonDS->GetRasterBand(1);
	GDALRasterBand *poBandData = hDataDS->GetRasterBand(1);

	void *dataLat = (float *) CPLMalloc(mi_GoesSrcImageXSize * sizeof(float));
	void *dataLon = (float *) CPLMalloc(mi_GoesSrcImageXSize * sizeof(float));
	void *dataData = (float *) CPLMalloc(mi_GoesSrcImageXSize * sizeof(float));

	GDALDataType eDT = poBandLat->GetRasterDataType();
	int numberOfValidPointInBBox = 0;

	/* Reproject every valid point in bounding box into sw_DataSet*/
	for (int iLine = 0; iLine < mi_GoesSrcImageYSize; iLine++)
	{
		poBandLat->RasterIO(GF_Read, 0, iLine, mi_GoesSrcImageXSize, 1, dataLat, mi_GoesSrcImageXSize, 1, eDT, 0, 0);
		poBandLon->RasterIO(GF_Read, 0, iLine, mi_GoesSrcImageXSize, 1, dataLon, mi_GoesSrcImageXSize, 1, eDT, 0, 0);
		poBandData->RasterIO(GF_Read, 0, iLine, mi_GoesSrcImageXSize, 1, dataData, mi_GoesSrcImageXSize, 1, eDT, 0, 0);

		for (int iPixel = 0; iPixel < mi_GoesSrcImageXSize; iPixel++)
		{
			double curLon = *((float *) dataLon + iPixel);
			double curLat = *((float *) dataLat + iPixel);
			if (isThisPointInBoundingBox(curLon, curLat, mb_LatLonBBox))
			{
				numberOfValidPointInBBox++;

				int xPos = 0;
				if(mb_GoesAcrossCM && curLon <= 0 && mdGeotransform[0] >= 0)
					xPos = (int)((360 + curLon - mdGeotransform[0])/mdGeotransform[1]);
				else
					xPos = (int)((curLon - mdGeotransform[0])/mdGeotransform[1]);
				int yPos = (int)(fabs((curLat - mdGeotransform[3])/mdGeotransform[5]));
				float* value = (float *)dataData + iPixel;
				sw_DataSet->RasterIO(GF_Write, xPos, yPos, 1, 1, value, 1, 1, eDT, 1, NULL, 1, 0, 1);

				dataValueMin = MIN(dataValueMin, *value);
				dataValueMax = MAX(dataValueMin, *value);

				rasteredStartX = MIN(rasteredStartX, xPos);
				rasteredEndX = MAX(rasteredEndX, xPos);
				rasteredStartY = MIN(rasteredStartY, yPos);
				rasteredEndY = MAX(rasteredEndY, yPos);
			}
		}
	}

	/* Execute bilinear interpolation to sw_DataSet */
	int rasteredBBox[4] = {rasteredStartX, rasteredEndX, rasteredStartY, rasteredEndY};
	int rasteredWidth  = rasteredEndX-rasteredStartX + 1;
	int rasteredHeight = rasteredEndY-rasteredStartY + 1;

	if(numberOfValidPointInBBox == 0 || rasteredWidth <= 0 || rasteredHeight <= 0)
	{
		GDALClose(maptrDS.release());
		maptrDS.reset(sw_DataSet);
	}
	else
	{
		void *rasterdData = (float *) CPLMalloc(rasteredWidth * sizeof(float));
		GDALRasterBand *poRasterdData = sw_DataSet->GetRasterBand(1);
		GDALRasterBand *poRasterdData2 = sw_DataSet2->GetRasterBand(1);

		for(int i = rasteredStartY; i <= rasteredEndY ; i++)
		{
			poRasterdData->RasterIO(GF_Read, rasteredStartX, i, rasteredWidth, 1, rasterdData, rasteredWidth, 1, eDT, 0, 0);
			for(int j = rasteredStartX, k=0; j <= rasteredEndX; j++, k++)
			{
				double curValue = *((float *) rasterdData + k);
				float curV[1] = {curValue};
				if(curValue < dataValueMin)//No Data Value
				{
					curV[0] = BilinearInterpolation(poRasterdData, i, j, rasteredBBox, dataValueMin);
					poRasterdData2->RasterIO(GF_Write, j, i, 1, 1, curV, 1, 1, eDT, 0, 0);
				}else
				{
					poRasterdData2->RasterIO(GF_Write, j, i, 1, 1, curV, 1, 1, eDT, 0, 0);
				}
			}
		}
		VSIFree((float *) rasterdData);
		GDALClose((GDALDatasetH) sw_DataSet);
		GDALClose(maptrDS.release());
		maptrDS.reset(sw_DataSet2);
	}

	VSIFree((float *) dataLat);
	VSIFree((float *) dataLon);
	VSIFree((float *) dataData);

	GDALClose((GDALDatasetH) hLatDS);
	GDALClose((GDALDatasetH) hLonDS);
	GDALClose((GDALDatasetH) hDataDS);


if(GOES_TIME_DEBUG)
{
finish = clock();
duration = (double)(finish-start)/CLOCKS_PER_SEC;
cout<<"Execute time in Goes_Dataset::RectifyGOESDataSetAcrossCM is: "<<duration<<endl;
}

	return CE_None;
}

CPLErr Goes_Dataset::RectifyGOESDataSet()
{
	char *pszDstWKT;
	moNativeCRS.exportToWkt(&pszDstWKT);

	GDALDriverH poDriver = GDALGetDriverByName("MEM");
	GDALDataset* sw_DataSet = (GDALDataset*) GDALCreate(poDriver, "", mi_RectifiedImageXSize,
			mi_RectifiedImageYSize, maptrDS->GetRasterCount(),
			maptrDS->GetRasterBand(1)->GetRasterDataType(), NULL);
	if (NULL == sw_DataSet)
	{
		GDALClose(poDriver);
		OGRFree(pszDstWKT);
		SetWCS_ErrorLocator("Goes_Dataset::rectifyDataSet()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to create \"MEM\" dataSet.");

		return CE_Failure;
	}

	sw_DataSet->SetProjection(pszDstWKT);
	sw_DataSet->SetGeoTransform(mdGeotransform);

clock_t start, finish;
double duration;
if(GOES_TIME_DEBUG)
{
start = clock();
}

	/* -------------------------------------------------------------------- */
	/*      reprojection.                                                   */
	/* -------------------------------------------------------------------- */

	if (CE_None != GDALReprojectImage(maptrDS.get(), NULL, sw_DataSet,
			pszDstWKT, /*GRA_Bilinear*/GRA_NearestNeighbour, 0, 0.125, NULL, NULL, NULL))
	{
		GDALClose(sw_DataSet);
		GDALClose(poDriver);
		OGRFree(pszDstWKT);
		SetWCS_ErrorLocator("Goes_Dataset::rectifyDataSet()");
		WCS_Error(CE_Failure, OGC_WCS_NoApplicableCode,
				"Failed to Reproject Image.");

		return CE_Failure;
	}

if(GOES_TIME_DEBUG)
{
finish = clock();
duration = (double)(finish-start)/CLOCKS_PER_SEC;
cout<<"Execute time in Goes_Dataset::RectifyGOESDataSet is: "<<duration<<endl;
}

	OGRFree(pszDstWKT);
	GDALClose(maptrDS.release());
	maptrDS.reset(sw_DataSet);
	return CE_None;
}

