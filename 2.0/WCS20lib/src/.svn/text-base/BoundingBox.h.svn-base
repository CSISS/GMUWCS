/*
 * BoundingBox.h
 *
 *  Created on: Apr 29, 2009
 *      Author: pli
 */

#ifndef BOUNDINGBOX_H_
#define BOUNDINGBOX_H_
#include <gdal.h>
#include <ogr_spatialref.h>
#include <limits>
#include <stdlib.h>
using namespace std;

class My2DPoint
{
public:
	double mi_X;
	double mi_Y;
//	OGRSpatialReference mo_CRS;

	virtual ~My2DPoint();

	My2DPoint()
	{
		mi_X = 0;
		mi_Y = 0;
	}
	My2DPoint(const double& xx, const double& yy) :
		mi_X(xx), mi_Y(yy)
	{
	}
	My2DPoint(const My2DPoint& p) :
		mi_X(p.mi_X), mi_Y(p.mi_Y)
	{
	}
	My2DPoint& operator =(const My2DPoint& p)
	{
		mi_X = p.mi_X;
		mi_Y = p.mi_Y;
		return *this;
	}

};

class BoundingBox
{
public:
	My2DPoint mo_LowerLeftPT;
	My2DPoint mo_UpperRightPT;
	OGRSpatialReference mo_CRS;

	BoundingBox(const My2DPoint& llpt, const My2DPoint& urpt,
			OGRSpatialReference& crs) :
		mo_LowerLeftPT(llpt), mo_UpperRightPT(urpt), mo_CRS(crs)
	{

	}

	BoundingBox(OGRSpatialReference& crs) :
		mo_LowerLeftPT(0,0), mo_UpperRightPT(0,0), mo_CRS(crs)
	{

	}
	BoundingBox& operator =(const BoundingBox& box)
	{
		mo_LowerLeftPT = box.mo_LowerLeftPT;
		mo_UpperRightPT = box.mo_UpperRightPT;
		mo_CRS = box.mo_CRS;
		return *this;
	}
	BoundingBox();
	virtual ~BoundingBox();

	BoundingBox Transform(OGRSpatialReference&, int&);
	BoundingBox TransformWorkExtend(OGRSpatialReference&, int&);
	BoundingBox Transform(const double*);
};

CPLErr CPL_DLL CPL_STDCALL bBox_transFormmate(OGRSpatialReference&,
		OGRSpatialReference&, My2DPoint& lowLeft, My2DPoint& upRight);
#endif /* BOUNDINGBOX_H_ */
